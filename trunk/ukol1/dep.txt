//vector<float> volumes(5, 1.05);
    //vector<float> values(5, 1.04);


    //stack<vector<int> > mujstack;
    //descStack(mujstack);
    //mujstack.push(v0);
    //mujstack.push(v1);
    //mujstack.push(v3);

    //descStack(mujstack);


/*
    root.print();

    Node a;
    Node b;

    root.expand(&a, &b, &volumes, &values);

    a.print();
    b.print();

    cout << "---------" << endl;

    Node a0, a1;
    Node b0, b1;

    a.expand(&a0, &a1, &volumes, &values);
    b.expand(&b0, &b1, &volumes, &values);

    a0.print();
    a1.print();

    b0.print();
    b1.print();

    Node * c = new Node(2);
*/





//not used now
//template = uvod tak, abych mohl pracovat s gen. tridou
template<class T> void descStack(stack<T> neco) {
    cout << "vypis:" << endl;

    if (neco.empty()) {
        cout << "-- NIC --" << endl;
    } else {
        T top = neco.top();
        cout << "-- neco --" << endl <<
                
                "size = " << neco.size() << endl;
    }

}

void descStack(stack<Node> * neco) {
    cout << "vypis:" << endl;

    if ((*neco).empty()) {
        cout << "-- NIC --" << endl;
    } else {
        cout << "-- stacktop: --" << endl <<
                "top_volumes = " << 
                "size = " << (*neco).size() << endl;
        vector<int>  lcl = (*neco).top().getCurrentContent();
        printVector( &lcl);
    }

}